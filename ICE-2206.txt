%DFT

clc;
clear all;
close all;
x = [1, 1, 1, 1];
N = 4;
disp(N);
subplot(3, 1, 1);
stem(x);
xlabel('n');
ylabel('x(n)');
title('input signal');
grid on;

if N > length(x)
    for i = 1 : N - length(x)
        x = [x, 0];
    end
end
y = zeros(1, N);
for k = 0 : N - 1
    for n = 0 : N - 1
        y(k + 1) = y (k + 1) + x(n + 1) * exp((-1i *2* pi * k * n) / N);
    end
end
disp(y);
subplot(3, 1, 2);
stem(y);
xlabel('k');
ylabel('x(k)');
title('DFT value');
grid on;

M = length(y);
m = zeros(1, M);
for k = 0 : M - 1
    for n = 0 : M - 1
        m(k + 1) = m(k + 1) + ((1 / M) * y(n + 1) * exp((1i * 2 * pi * k *  n) / M));
    end
end
disp(m);
subplot(3, 1, 3);
stem(m);
xlabel('n');
ylabel('y(n)');
title('IDFT value');
grid on;


%2
clc;
close all;
clear all;
x = [1 2 3 4 5 6 7 6 5 4 3 2 1];
n = -2 : 10;
subplot(4, 1, 1);
stem(n, x);
xlabel('n');
ylabel('x(n)');
title('x(n)');
grid on;

n1 = 3 : 15;
subplot(4, 1, 2);
stem(n1, 2 * x);
xlabel('n');
ylabel('2x(n-5)')
title('2x(n-5)');
grid on;

n2 = -6 : 6;
subplot(4, 1, 3);
stem(n2, 3 * x);
xlabel('n');
ylabel('3x(n+4)')
title('3x(n+4)');
grid on;

m = min(min(n1), min(n2)) : max(max(n1), max(n2));
y1 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) < min(n1) || m(i) > max(n1))
        y1 = [y1, 0];
    else
        y1 = [y1, x(temp)];
        temp = temp + 1;
    end
end

y2 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) < min(n2) || m(i) > max(n2))
        y2 = [y2, 0];
    else
        y2 = [y2, x(temp)];
        temp = temp + 1;
    end
end

y = y1 - y2;
subplot(4, 1, 4);
stem(m, y);
xlabel('n');
ylabel('y(n)');
title('y(n) = 2x(n-5)- 3x(n+4)');
grid on;


%3
clc;
clear all;
close all;
A = 5;
f = 5;
t = 0 : .01 : 1;
x = A * sin(2 * pi * f * t);
subplot(4, 1, 1);
plot(t, x);
xlabel('time');
ylabel('amplitude');
title('continuous time signal');
grid on;

subplot(4, 1, 2);
stem(t, x);
xlabel('time');
ylabel('amplitude');
title('sampling');
grid on;

x1 = A + x;
subplot(4, 1, 3);
stem(t, x1);
xlabel('time');
ylabel('amplitude');
title('discrete time signal');
grid on;

x2 = round(x1);
subplot(4, 1, 4);
stem(t, x2);
xlabel('time');
ylabel('amplitude');
title('Quantization');
grid on;

x3 = dec2bin(x2);
disp(x3);


%4
clc;
clear all;
close all;
n = -5 : 5;
x = 2 * deltaF(-2, -5, 5) - deltaF(4, -5, 5);
stem(n, x);
xlabel('n');
ylabel('x(n)');
title('the discrete funtion');
axis([-6 6 -3 3]);
grid on;

function[x, n] = deltaF(n0, n1, n2)
    n = n1 : n2;
    x = (n - n0) == 0;
end



%5
clc;
close all;
clear all;
x = [1, 0, 3, 4];
n1 = -2 : 1;
subplot(5, 1, 1);
stem(n1, x);
xlabel('n');
ylabel('x1(n)');
title('x1(n)')
axis([-3 3 0 5]);
grid on

y = [1, 1, 1, 1];
n2 = 0 : 3;
subplot(5, 1, 2);
stem(n2, y);
xlabel('n');
ylabel('x2(n)');
title('x2(n)')
axis([-3 5 0 5]);
grid on


m = min(min(n1), min(n2)) : max(max(n1), max(n2));
y1 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) < min(n1) || m(i) > max(n1))
        y1 = [y1, 0];
    else
        y1 = [y1, x(temp)];
        temp = temp + 1;
    end
end

y2 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) < min(n2) || m(i) > max(n2))
        y2 = [y2, 0];
    else
        y2 = [y2, y(temp)];
        temp = temp + 1;
    end
end

add = y1 + y2;
subplot(5, 1, 3);
stem(m, add);
axis([- 3 5 0 7]);
xlabel('n');
ylabel('x(n)+y(n)');
title('addition');
grid on;

z = [3, -1, 0, -4];
n3 = -1 : 2;
subplot(5, 1, 4);
stem(n3, z);
xlabel('n');
ylabel('z(n)');
title('z(n)');
axis([-2 3 -5 4]);
grid on;

c = fliplr(x);
d = fliplr(-n3);
subplot(5, 1, 5);
stem(d, c);
xlabel('n');
ylabel('-z(n)');
title('folding of z(n)');
axis([-3 2 -5 4]);


%6
clc;
close all;
clear all;
x = [1, 2, 3, 4];
n1 = -2 : 1;
subplot(6, 1, 1);
stem(n1, x);
axis([-8 10 -2 5]);
xlabel('n');
ylabel('x(n)');
title('x(n)');
grid on;

y = [1, 1, 1, 1];
n2 = 0 : 3;
subplot(6, 1, 2);
stem(n2, y);
axis([-8 10 -2 5]);
xlabel('n');
ylabel('y(n)');
title('y(n)');
grid on;

m = min(min(n1), min(n2)) : max(max(n1), max(n2));
y1 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) <min(n1) || m(i) > max(n1))
        y1 = [y1, 0];
    else
        y1 = [y1, x(temp)];
        temp = temp + 1;
    end
end
y2 = [];
temp = 1;
for i = 1 : length(m)
    if(m(i) <min(n2) || m(i) > max(n2))
        y2 = [y2, 0];
    else
        y2 = [y2, y(temp)];
        temp = temp + 1;
    end
end
mul = y1 .* y2;
subplot(6, 1, 3);
stem(m, mul);
axis([-8 10 -2 5]);
xlabel('n');
ylabel('x1(n)*x2(n)');
title('x(n)*y(n)');
grid on;        

z = [-2, 3, 0, 1, 5];
n3 = -2 : 2;
subplot(6, 1, 4);
stem(n3, z);
xlabel('n');
ylabel('z(n)');
title('z[n]');
axis([-8 10 -4 6]);
grid on;

s1 = 5;
a = n3 + s1;
subplot(6, 1, 5);
stem(a, z);
xlabel('n');
ylabel('z(n-5)');
title('z(n-5)');
axis([-8 10 -4 6]);
grid on;

s2 = 4;
a2 = n3 - s2;
subplot(6, 1, 6);
stem(a2, z);
xlabel('n');
ylabel('z(n-5)');
title('z(n-5)');
axis([-8 10 -4 6]);
grid on;


%fourier

clc;
clear all;
close all;
f = -2 : .01 : 2;
x = 4 * sinc(4 * f);

subplot(3, 1, 1);
plot(f, x);
xlabel('time');
ylabel('amplitude');
title('real part');
grid on;

subplot(3, 1, 2);
plot(f, abs(x));
xlabel('time');
ylabel('amplitude');
title('magnitude part');
grid on;

subplot(3, 1, 3);
plot(f, angle(x));
xlabel('time');
ylabel('amplitude');
title('phase part');
grid on;

% last_question
clc;
close all;
clear all;
t = -20 : 1 : 20;
unitstep = t >= 0;
impluse = t == 0;
unitramp = t .* unitstep;

subplot(3, 1, 1);
stem(t, unitstep);
xlabel('time');
ylabel('amplitude');
title('unitstep discrete time');
grid on;

subplot(3, 1, 2);
stem(t, impluse);
xlabel('time');
ylabel('amplitude');
title('impluse discrete time');
grid on;

subplot(3, 1, 3);
stem(t, unitramp);
xlabel('time');
ylabel('amplitude');
title('unitramp discrete time');
grid on;


%extra
clc;
clear all;
close all;
w = [0 : 1 : 500] * (pi / 500);
H = exp(j * w) ./ (exp(j * w) - .9 * ones(1, 501));
magH = abs(H);
angH = angle(H);
subplot(2, 1, 1);
plot(w / pi, magH);
title('Magnitude response');
xlabel('frequency in pi unit');
ylabel('Mangnitude');
grid on;

subplot(2, 1, 2);
plot(w / pi, angH / pi);
title('phase response');
xlabel('frequency in pi unit');
ylabel('phase in pi unit');
grid on;



